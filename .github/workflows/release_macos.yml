name: Release Binaries (macOS and Homebrew)

on:
  push:
    tags:
      - 'v*'  # Trigger on tags starting with "v" (e.g., v1.0.0)

jobs:
  build:
    name: Build, Release, and Publish for macOS (ARM & Intel) and Homebrew
    runs-on: macos-latest  # Use macOS runner

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Set up Rust toolchain
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    # Add the x86_64 target to cross-compile for Intel macOS
    - name: Add x86_64 target for cross-compilation
      run: |
        rustup target add x86_64-apple-darwin
        echo "Added x86_64 target for cross-compilation"

    # Build for macOS (ARM)
    - name: Build for macOS (ARM)
      run: |
        echo "Building for macOS aarch64 (ARM)"
        cargo build --release --target aarch64-apple-darwin
        echo "Build completed for ARM"

    # Build for macOS (Intel)
    - name: Build for macOS (Intel)
      run: |
        echo "Building for macOS x86_64 (Intel)"
        cargo build --release --target x86_64-apple-darwin
        echo "Build completed for Intel"

    # Gzip the ARM binary as mac_arm.tar.gz
    - name: Gzipping the ARM binary
      run: |
        ARCHITECTURE="aarch64"
        OUTPUT_FILE="mac_${ARCHITECTURE}.tar.gz"
        tar -czf target/release/$OUTPUT_FILE target/release/${ARCHITECTURE}-apple-darwin/release/$GITHUB_REPOSITORY
        echo "Created $OUTPUT_FILE"

    # Gzip the Intel binary as mac_x86.tar.gz
    - name: Gzipping the Intel binary
      run: |
        ARCHITECTURE="x86_64"
        OUTPUT_FILE="mac_${ARCHITECTURE}.tar.gz"
        tar -czf target/release/$OUTPUT_FILE target/release/${ARCHITECTURE}-apple-darwin/release/$GITHUB_REPOSITORY
        echo "Created $OUTPUT_FILE"

    # Hash the release binary for ARM
    - name: Hash ARM release binary
      run: |
        ARCHITECTURE="aarch64"
        OUTPUT_FILE="mac_${ARCHITECTURE}.tar.gz"
        HASH=$(shasum -a 256 target/release/$OUTPUT_FILE | awk '{print $1}')
        echo "${ARCHITECTURE} HASH: $HASH"

    # Hash the release binary for Intel
    - name: Hash Intel release binary
      run: |
        ARCHITECTURE="x86_64"
        OUTPUT_FILE="mac_${ARCHITECTURE}.tar.gz"
        HASH=$(shasum -a 256 target/release/$OUTPUT_FILE | awk '{print $1}')
        echo "${ARCHITECTURE} HASH: $HASH"

    # Update Homebrew formula with the new version and hashes for both architectures
    - name: Update Homebrew formula
      run: |
        cd ./homebrew-tod  # Ensure you're in the correct directory
        ARCHITECTURE_ARM="aarch64"
        ARCHITECTURE_INTEL="x86_64"
        OUTPUT_FILE_ARM="mac_${ARCHITECTURE_ARM}.tar.gz"
        OUTPUT_FILE_INTEL="mac_${ARCHITECTURE_INTEL}.tar.gz"
        ambr --regex "version \"\\d+\\.\\d+\\.\\d+\"" "version \"$GITHUB_REF_NAME\"" Formula/tod.rb
        ambr --regex "https://github.com/alanvardy/tod/releases/download/v\d+\\.\\d+\\.\\d+/" "https://github.com/alanvardy/tod/releases/download/v$GITHUB_REF_NAME/" Formula/tod.rb
        ambr --regex "sha256 \"[0-9a-z]+\"" "sha256 \"$HASH\"" Formula/tod.rb
        echo "Homebrew formula updated for ARM and Intel"

    # Ensure the branch is up to date with the remote
    - name: Ensure branch is up to date
      run: |
        git fetch origin
        git status
        if ! git status | grep -q "Your branch is up to date with"; then
            echo "Error: The branch is not up-to-date with the remote. Please pull the latest changes before proceeding."
            exit 1
        fi

    # Commit and push Homebrew formula changes
    - name: Commit and push Homebrew changes
      run: |
        git add .
        git commit -m "Release version $GITHUB_REF_NAME"
        git push origin HEAD
        echo "Homebrew update complete"

    # Upload binaries to GitHub release using softprops/action-gh-release
    - name: Upload binaries to GitHub release
      uses: softprops/action-gh-release@v2.2.2
      with:
        files: |
          target/release/mac_aarch64.tar.gz
          target/release/mac_x86_64.tar.gz
        token: ${{ secrets.RELEASE_PAT }}  # Use RELEASE_PAT token for authentication
