# This runs an OS-specific test, then builds and releases binaries for macOS (ARM and Intel) and publishes them to GitHub.
# It is triggered by push with a version tag is present (generally from a release-please release)

name: macOS Build & Release
permissions:
  contents: write  # Allow the workflow to write to the repository contents
  pull-requests: write  # Allow the workflow to write to pull requests

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:  # Allow manual triggering of the workflow

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

jobs:
  build:
    name: Build, Release, and Publish for macOS (ARM & Intel)
    runs-on: macos-latest  # Use macOS runner

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: Swatinem/rust-cache@v2
      with:
        cache-all-crates: true
    - uses: taiki-e/install-action@v2
      with:
        tool: nextest

    # Run Platform Tests
    - name: Run tests using cargo-nextest
      run: cargo nextest run --all-features  # Run all tests with nextest.
      continue-on-error: false  # Fail the job if tests do not pass

    # Get version and tag from Cargo.toml
    - name: Set VERSION from Cargo.toml
      id: cargo-get
      uses: nicolaiunrein/cargo-get@master
      with:
        subcommand: package.version 

    # Set the version as an output variable
    - name: Set version output
      id: package-version
      run: |
        echo "VERSION=$(cargo get package.version)" >> $GITHUB_ENV
        echo "TAG=$(cargo get package.version --pretty)" >> $GITHUB_ENV

    # Add the x86_64 target to cross-compile for darwin (macOS Intel)
    - name: Add x86_64 target for cross-compilation
      run: rustup target add x86_64-apple-darwin
 
    # Build for darwin (macOS ARM)
    - name: Build for macOS (ARM)
      run: |
        cargo build --release --target aarch64-apple-darwin

    # Gzip the ARM binary as tod-<version>-darwin-arm64.tar.gz
    - name: Gzipping the ARM binary
      run:
        tar -czf target/release/tod-$VERSION-darwin-arm64.tar.gz -C target/aarch64-apple-darwin/release tod

    # Hash the release binary for ARM
    - name: Hash ARM release binary
      run: |
        HASH=$(shasum -a 256 target/release/tod-$VERSION-darwin-arm64.tar.gz | awk '{print $1}')
        echo "ARM HASH: $HASH"

    # Build for darwin (macOS amd64)
    - name: Build for macOS (Intel)
      run: |
        cargo build --release --target x86_64-apple-darwin

    # Gzip the x86 binary as tod-<version>-darwin-amd64.tar.gz
    - name: Gzipping the x86 binary
      run: |
        tar -czf target/release/tod-$VERSION-darwin-amd64.tar.gz -C target/x86_64-apple-darwin/release tod

    # Hash the release binary for amd64
    - name: Hash Intel release binary
      run: |
        HASH=$(shasum -a 256 target/release/tod-$VERSION-darwin-amd64.tar.gz | awk '{print $1}')
        echo "Intel HASH: $HASH"

    # Upload Binaries to existing GitHub release using softprops/action-gh-release
    - name: Upload darwin (macOS) binaries
      run: |
        gh release upload "$TAG" \
          target/release/tod-$VERSION-darwin-amd64.tar.gz \
          target/release/tod-$VERSION-darwin-arm64.tar.gz \
          --repo "$GITHUB_REPOSITORY" \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.TOD_CONTENTS_READ_WRITE }}
        VERSION: ${{ env.VERSION }}
        TAG: ${{ env.TAG }}
