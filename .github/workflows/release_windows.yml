name: Windows Build & Release
# This workflow builds the Windows x86_64 binary and uploads it to a GitHub release.
# It is triggered by a push with a version tag (e.g., v1.0.0), typically from a release-please release.
# It also allows manual triggering for testing purposes.


on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: # Allow manual triggering of the workflow for testing

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

jobs:
  build-windows:
    name: Build & Upload Windows x86_64
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Rust target (if needed)
        run: rustup target add x86_64-pc-windows-msvc

      - name: Get version
        id: version
        shell: bash
        run: echo "VERSION=$(cargo get package.version --pretty)" >> $GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Zip the Windows binary
        run: |
          Compress-Archive -Path target\x86_64-pc-windows-msvc\release\tod.exe `
                          -DestinationPath target\release\tod-${env:VERSION}-windows-x86_64.zip

      - name: Hash the ZIP
        run: |
          Get-FileHash target\release\tod-${env:VERSION}-windows-x86_64.zip -Algorithm SHA256

      - name: Upload to GitHub Release
        run: |
          gh release upload "$env:VERSION" `
            "target/release/tod-${env:VERSION}-windows-x86_64.zip" `
            --repo "$env:GITHUB_REPOSITORY" `
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.TOD_CONTENTS_READ_WRITE }}
